<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Markdown | Jim's Blog]]></title>
  <link href="http://liu1084.github.io/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://liu1084.github.io/"/>
  <updated>2016-05-07T18:12:31+08:00</updated>
  <id>http://liu1084.github.io/</id>
  <author>
    <name><![CDATA[Jim liu]]></name>
    <email><![CDATA[liu1084@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdown 语法说明 (简体中文版)]]></title>
    <link href="http://liu1084.github.io/?p=149"/>
    <updated>2016-01-05T08:29:27+08:00</updated>
    <id>http://liu1084.github.io/markdown-syntax</id>
    <content type="html"><![CDATA[<h1>Markdown 语法说明</h1>

<p>概述</p>

<p>Markdown 的目标是实现「易读易写」。</p>

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>

<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>

<p>兼容 HTML</p>

<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>

<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <p> 标签。</p>

<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>

<p>这是一个普通段落。</p>

<!--more-->




<table>
  
<tr>
  
<td>Foo</td>
  
</tr>
  
</table>


<p>这是另一个普通段落。</p>

<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。</p>

<p>HTML 的区段（行内）标签如 <span>、<cite>、<del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <a> 或 <img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>

<p>特殊字符自动转换</p>

<p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p>

<p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p>

<p><a href="http://images.google.com/images?num=30&amp;q=larry+bird">http://images.google.com/images?num=30&amp;q=larry+bird</a></p>

<p>你必须要把网址转换写为：</p>

<p><a href="http://images.google.com/images?num=30&amp;q=larry+bird">http://images.google.com/images?num=30&amp;q=larry+bird</a></p>

<p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>

<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。</p>

<p>所以你如果要在文档中插入一个版权符号 ©，你可以这样写：</p>

<p>&copy;</p>

<p>Markdown 会保留它不动。而若你写：</p>

<p>AT&amp;T</p>

<p>Markdown 就会将它转为：</p>

<p>AT&amp;T</p>

<p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>

<p>4 &lt; 5</p>

<p>Markdown 将会把它转换为：</p>

<p>4 &lt; 5</p>

<p>不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>

<p>区块元素</p>

<p>段落和换行</p>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>

<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <br /> 标签。</p>

<p>如果你确实想要依赖 Markdown 来插入 <br /> 标签的话，在插入处先按入两个以上的空格然后回车。</p>

<p>的确，需要多费点事（多加空格）来产生 <br /> ，但是简单地「每个换行都转换为 <br />」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>

<p>标题</p>

<p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>

<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 &#8211; （第二阶标题），例如：</p>

<p>This is an H1</p>

<hr />

<p>This is an H2</p>

<p>&#8212;&#8212;&#8212;&#8212;-</p>

<p>任何数量的 = 和 &#8211; 都可以有效果。</p>

<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>

<p># 这是 H1</p>

<p>## 这是 H2</p>

<p>###### 这是 H6</p>

<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的# 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>

<p># 这是 H1 #</p>

<p>## 这是 H2 ##</p>

<p>### 这是 H3 ######</p>

<p>区块引用 Blockquotes</p>

<p>Markdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 > ：</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</p>

<p>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>

<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</p>

<p>id sem consectetuer libero luctus adipiscing.</p></blockquote>

<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 > ：</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</p></blockquote>

<p>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>

<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</p></blockquote>

<p>id sem consectetuer libero luctus adipiscing.</p>

<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 > ：</p>

<blockquote><p>This is the first level of quoting.</p>

<blockquote><p>This is nested blockquote.</p></blockquote>

<p>Back to the first level.</p></blockquote>

<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>

<blockquote><h2>这是一个标题。</h2>

<ol>
<li><p>这是第一行列表项。</p></li>
<li><p>这是第二行列表项。</p></li>
</ol>


<p>给出一些例子代码：</p>

<p>return shell_exec(&#8220;echo $input | $markdown_script&#8221;);</p></blockquote>

<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>

<p>列表</p>

<p>Markdown 支持有序列表和无序列表。</p>

<p>无序列表使用星号、加号或是减号作为列表标记：</p>

<ul>
<li><p>Red</p></li>
<li><p>Green</p></li>
<li><p>Blue</p></li>
</ul>


<p>等同于：</p>

<ul>
<li><p>Red</p></li>
<li><p>Green</p></li>
<li><p>Blue</p></li>
</ul>


<p>也等同于：</p>

<p>&#8211; Red</p>

<p>&#8211; Green</p>

<p>&#8211; Blue</p>

<p>有序列表则使用数字接着一个英文句点：</p>

<ol>
<li><p>Bird</p></li>
<li><p>McHale</p></li>
<li><p>Parish</p></li>
</ol>


<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>

<ol>
  
<li>Bird</li>
  
<li>McHale</li>
  
<li>Parish</li>
  
</ol>


<p>如果你的列表标记写成：</p>

<ol>
<li><p>Bird</p></li>
<li><p>McHale</p></li>
<li><p>Parish</p></li>
</ol>


<p>或甚至是：</p>

<ol>
<li><p>Bird</p></li>
<li><p>McHale</p></li>
<li><p>Parish</p></li>
</ol>


<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>

<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>

<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>

<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>

<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>
</ul>


<p>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</p>

<p>viverra nec, fringilla in, laoreet vitae, risus.</p>

<ul>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</li>
</ul>


<p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>

<p>但是如果你懒，那也行：</p>

<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>
</ul>


<p>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</p>

<p>viverra nec, fringilla in, laoreet vitae, risus.</p>

<ul>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</li>
</ul>


<p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>

<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <p> 标签包起来，举例来说：</p>

<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>


<p>会被转换为：</p>

<ul>
  
<li>Bird</li>
  
<li>Magic</li>
  
</ul>


<p>但是这个：</p>

<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>


<p>会被转换为：</p>

<ul>
  
<li><p>Bird</p></li>
  
<li><p>Magic</p></li>
  
</ul>


<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>

<ol>
<li>This is a list item with two paragraphs. Lorem ipsum dolor</li>
</ol>


<p>sit amet, consectetuer adipiscing elit. Aliquam hendrerit</p>

<p>mi posuere lectus.</p>

<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet</p>

<p>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</p>

<p>sit amet velit.</p>

<ol>
<li>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ol>


<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>

<ul>
<li>This is a list item with two paragraphs.</li>
</ul>


<p>This is the second paragraph in the list item. You&#8217;re</p>

<p>only required to indent the first line. Lorem ipsum dolor</p>

<p>sit amet, consectetuer adipiscing elit.</p>

<ul>
<li>Another item in the same list.</li>
</ul>


<p>如果要在列表项目内放进引用，那 > 就需要缩进：</p>

<ul>
<li>A list item with a blockquote:</li>
</ul>


<blockquote><p>This is a blockquote</p>

<p>inside a list item.</p></blockquote>

<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>

<ul>
<li>一列表项包含一个列表区块：</li>
</ul>


<p>&lt;代码写在这></p>

<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>

<ol>
<li>What a great season.</li>
</ol>


<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>

<p>1986. What a great season.</p>

<p>代码区块</p>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。</p>

<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>

<p>这是一个普通段落：</p>

<p>这是一个代码区块。</p>

<p>Markdown 会转换成：</p>

<p>这是一个普通段落：</p>




<pre><code>这是一个代码区块。
  
</code></pre>


<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>

<p>Here is an example of AppleScript:</p>

<p>tell application &#8220;Foo&#8221;</p>

<p>beep</p>

<p>end tell</p>

<p>会被转换为：</p>

<p>Here is an example of AppleScript:</p>




<pre><code>tell application &#8220;Foo&#8221;
  
beep
  
end tell
  
</code></pre>


<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>

<p>在代码区块里面， &amp; 、 &lt; 和 > 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>

<div class=&#8221;footer&#8221;>
  
&copy; 2004 Foo Corporation
  
</div>


<p>会被转换为：</p>

<pre><code><div class=&#8221;footer&#8221;>
  
&copy; 2004 Foo Corporation
  
</div>
  
</code></pre>


<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>

<p>分隔线</p>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<p>* * *</p>

<p>***</p>

<p>*****</p>

<p>&#8211; &#8211; &#8211;</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>

<p>区段元素</p>

<p>链接</p>

<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>

<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>

<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<p>This is [an example](<a href="http://example.com/">http://example.com/</a> &#8220;Title&#8221;) inline link.</p>

<p>[This link](<a href="http://example.net/">http://example.net/</a>) has no title attribute.</p>

<p>会产生：</p>

<p>This is <a href=&#8221;http://example.com/&#8221; title=&#8221;Title&#8221;>
  
an example</a> inline link.</p>




<p><a href=&#8221;http://example.net/&#8221;>This link</a> has no
  
title attribute.</p>


<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<p>See my [About](/about/) page for details.</p>

<p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>

<p>This is [an example][id] reference-style link.</p>

<p>你也可以选择性地在两个方括号中间加上一个空格：</p>

<p>This is [an example] [id] reference-style link.</p>

<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>

<p>链接内容定义的形式为：</p>

<p>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</p>

<p>接着一个冒号</p>

<p>接着一个以上的空格或制表符</p>

<p>接着链接的网址</p>

<p>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</p>

<p>下面这三种链接的定义都是相同：</p>

<p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>

<p>链接网址也可以用尖括号包起来：</p>

<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>

<p>&#8220;Optional Title Here&#8221;</p>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>

<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>

<p>[link text][a]</p>

<p>[link text][A]</p>

<p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &#8220;Google&#8221; 链接到 google.com，你可以简化成：</p>

<p>[Google][]</p>

<p>然后定义链接内容：</p>

<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>

<p>Visit [Daring Fireball][] for more information.</p>

<p>然后接着定义链接：</p>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>

<p>下面是一个参考式链接的范例：</p>

<p>I get 10 times more traffic from [Google] [1] than from</p>

<p>[Yahoo] [2] or [MSN] [3].</p>

<p>如果改成用链接名称的方式写：</p>

<p>I get 10 times more traffic from [Google][] than from</p>

<p>[Yahoo][] or [MSN][].</p>

<p>上面两种写法都会产生下面的 HTML。</p>

<p>I get 10 times more traffic from <a href=&#8221;http://google.com/&#8221;
  
title=&#8221;Google&#8221;>Google</a> than from
  
<a href=&#8221;http://search.yahoo.com/&#8221; title=&#8221;Yahoo Search&#8221;>Yahoo</a>
  
or <a href=&#8221;http://search.msn.com/&#8221; title=&#8221;MSN Search&#8221;>MSN</a>.</p>


<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>

<p>I get 10 times more traffic from [Google](<a href="http://google.com/">http://google.com/</a> &#8220;Google&#8221;)</p>

<p>than from [Yahoo](<a href="http://search.yahoo.com/">http://search.yahoo.com/</a> &#8220;Yahoo Search&#8221;) or</p>

<p>[MSN](<a href="http://search.msn.com/">http://search.msn.com/</a> &#8220;MSN Search&#8221;).</p>

<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>

<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>

<p>强调</p>

<p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或_ 包起来的话，则会被转成 <strong>，例如：</p>

<p>*single asterisks*</p>

<p>_single underscores_</p>

<p>**double asterisks**</p>

<p>__double underscores__</p>

<p>会转成：</p>

<p><em>single asterisks</em></p>

<p><em>single underscores</em></p>

<p><strong>double asterisks</strong></p>

<p><strong>double underscores</strong></p>

<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>

<p>强调也可以直接插在文字中间：</p>

<p>un*frigging*believable</p>

<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>

<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>

<p>*this text is surrounded by literal asterisks*</p>

<p>代码</p>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>

<p>Use the `printf()` function.</p>

<p>会产生：</p>

<p>Use the <code>printf()</code> function.</p>


<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>

<p>&#8220;There is a literal backtick (`) here.&#8220;</p>

<p>这段语法会产生：</p>

<p><code>There is a literal backtick (\`) here.</code></p>


<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>

<p>A single backtick in a code span: &#8220; ` &#8220;</p>

<p>A backtick-delimited string in a code span: &#8220; `foo` &#8220;</p>

<p>会产生：</p>

<p>A single backtick in a code span: <code>\`</code></p>




<p>A backtick-delimited string in a code span: <code>\`foo\`</code></p>


<p>在代码区段内，&amp; 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>

<p>Please don&#8217;t use any `<blink>` tags.</p>

<p>转为：</p>

<p>Please don&#8217;t use any <code><blink></code> tags.</p>


<p>你也可以这样写：</p>

<p>`&#8212;` is the decimal-encoded equivalent of `&mdash;`.</p>

<p>以产生：</p>

<p><code>&#8212;</code> is the decimal-encoded
  
equivalent of <code>&mdash;</code>.</p>


<p>图片</p>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>

<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>

<p>行内式的图片语法看起来像是：</p>

<p>![Alt text](/path/to/img.jpg)</p>

<p>![Alt text](/path/to/img.jpg &#8220;Optional title&#8221;)</p>

<p>详细叙述如下：</p>

<p>一个惊叹号 !</p>

<p>接着一个方括号，里面放上图片的替代文字</p>

<p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &#8216;title&#8217; 文字。</p>

<p>参考式的图片语法则长得像这样：</p>

<p>![Alt text][id]</p>

<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>

<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p>

<p>其它</p>

<p>自动链接</p>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<p><a href="http://example.com/">http://example.com/</a></p>

<p>Markdown 会转为：</p>

<p><a href=&#8221;http://example.com/&#8221;><a href="http://example.com/">http://example.com/</a></a></p>

<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>

<p><a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#x61;&#x64;&#x64;&#x72;&#101;&#115;&#x73;&#x40;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;">&#97;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a></p>

<p>Markdown 会转成：</p>

<p>&lt;a href=&#8221;&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;</p>

<p>&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;</p>

<p>&#109;&#8221;>&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;</p>

<p>&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a></p>

<p>在浏览器里面，这段字串（其实是 <a href=&#8221;mailto:address@example.com&#8221;><a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#97;&#100;&#x64;&#114;&#101;&#x73;&#115;&#64;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#97;&#x64;&#x64;&#114;&#x65;&#115;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;</a></a>）会变成一个可以点击的「address@example.com」链接。</p>

<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>

<p>反斜杠</p>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</p>

<p>*literal asterisks*</p>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>

<p>\ 反斜线</p>

<p>` 反引号</p>

<ul>
<li>星号</li>
</ul>


<p>_ 底线</p>

<p>{} 花括号</p>

<p>[] 方括号</p>

<p>() 括弧</p>

<p># 井字号</p>

<ul>
<li>加号</li>
</ul>


<p>&#8211; 减号</p>

<p>. 英文句点</p>

<p>! 惊叹号</p>
]]></content>
  </entry>
  
</feed>
