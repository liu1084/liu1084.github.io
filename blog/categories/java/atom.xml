<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Jim's Blog]]></title>
  <link href="http://liu1084.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://liu1084.github.io/"/>
  <updated>2016-05-16T11:19:45+08:00</updated>
  <id>http://liu1084.github.io/</id>
  <author>
    <name><![CDATA[Jim liu]]></name>
    <email><![CDATA[liu1084@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java/jetty/Config Jetty in Intellj Idea IDE]]></title>
    <link href="http://liu1084.github.io/blog/2016/05/15/java-slash-jetty-slash-config-jetty-in-intellj-idea-ide/"/>
    <updated>2016-05-15T13:44:13+08:00</updated>
    <id>http://liu1084.github.io/blog/2016/05/15/java-slash-jetty-slash-config-jetty-in-intellj-idea-ide</id>
    <content type="html"><![CDATA[<ul>
<li>install jetty plugin for intellj idea: IDEA jetty RUNNER</li>
<li>download <a href="http://download.eclipse.org/jetty/stable-9/dist/jetty-distribution-9.3.8.v20160314.tar.gz">jetty 9.3</a> from eclipse.com/jetty &amp; unzip it to d:\http\jetty9.3</li>
<li>create springmvc project with template using intellj idea</li>
<li><p>edit pom.xml file &amp; add jetty support for your project :</p>

<p>  <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>9.3.8.v20160314</version>
  </dependency></p>

<p>  <!-- http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-util -->
  <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-util</artifactId>
      <version>9.3.8.v20160314</version>
  </dependency></p>

<p>  <!-- http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-servlet -->
  <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>9.3.8.v20160314</version>
  </dependency></p>

<p>  <!-- http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-webapp -->
  <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-webapp</artifactId>
      <version>9.3.8.v20160314</version>
  </dependency></p></li>
<li><p>edit run configure &amp; add jetty runner</p></li>
<li>add jsp support</li>
<li>open project structure</li>
<li><p>add global libs from jetty 9.3 lib -> apache-jsp</p></li>
<li><p>start jetty runner &amp; open your webapp in browser.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java/jar/Introduct manifest.mf Fields]]></title>
    <link href="http://liu1084.github.io/blog/2016/05/12/java-slash-jar-slash-introduct-manifest-dot-mf-fields/"/>
    <updated>2016-05-12T13:33:20+08:00</updated>
    <id>http://liu1084.github.io/blog/2016/05/12/java-slash-jar-slash-introduct-manifest-dot-mf-fields</id>
    <content type="html"><![CDATA[<p>打开Java的JAR文件我们经常可以看到文件中包含着一个META-INF目录，这个目录下会有一些文件，其中必有一个MANIFEST.MF，这个文件描述了该Jar文件的很多信息，下面将详细介绍MANIFEST.MF文件的内容，先来看struts.jar中包含的MANIFEST.MF文件内容：</p>

<pre><code>Manifest-Version: 1.0 
Created-By: Apache Ant 1.5.1 
Extension-Name: Struts Framework 
Specification-Title: Struts Framework 
Specification-Vendor: Apache Software Foundation 
Specification-Version: 1.1 
Implementation-Title: Struts Framework 
Implementation-Vendor: Apache Software Foundation 
Implementation-Vendor-Id: org.apache 
Implementation-Version: 1.1 
Class-Path:   commons-beanutils.jar commons-collections.jar commons-dig 
ester.jar commons-logging.jar commons-validator.jar jakarta-oro.jar s 
truts-legacy.jar 
</code></pre>

<p>如果我们把MANIFEST中的配置信息进行分类，可以归纳出下面几个大类：</p>

<h2>一般属性</h2>

<h3>Manifest-Version</h3>

<p>用来定义manifest文件的版本，例如：Manifest-Version: 1.0</p>

<h3>Created-By</h3>

<p>声明该文件的生成者，一般该属性是由jar命令行工具生成的，例如：Created-By: Apache Ant 1.5.1</p>

<h3>Signature-Version</h3>

<p>定义jar文件的签名版本</p>

<h3>Class-Path</h3>

<p>应用程序或者类装载器使用该值来构建内部的类搜索路径</p>

<h2>应用程序相关属性</h2>

<h3>Main-Class</h3>

<p>定义jar文件的入口类，该类必须是一个可执行的类，一旦定义了该属性即可通过 java -jar x.jar来运行该jar文件。</p>

<h2>小程序(Applet)相关属性</h2>

<h3>Extendsion-List</h3>

<p>该属性指定了小程序需要的扩展信息列表，列表中的每个名字对应以下的属性</p>

<ul>
<li><extension>-Extension-Name</li>
<li><extension>-Specification-Version</li>
<li><extension>-Implementation-Version</li>
<li><extension>-Implementation-Vendor-Id</li>
<li><extension>-Implementation-URL</li>
</ul>


<h2>扩展标识属性</h2>

<h3>Extension-Name</h3>

<p>该属性定义了jar文件的标识，例如Extension-Name: Struts Framework</p>

<h2>包扩展属性</h2>

<ul>
<li>Implementation-Title    定义了扩展实现的标题</li>
<li>Implementation-Version    定义扩展实现的版本</li>
<li>Implementation-Vendor    定义扩展实现的组织</li>
<li>Implementation-Vendor-Id    定义扩展实现的组织的标识</li>
<li>Implementation-URL :    定义该扩展包的下载地址(URL)</li>
<li>Specification-Title    定义扩展规范的标题</li>
<li>Specification-Version    定义扩展规范的版本</li>
<li>Specification-Vendor    声明了维护该规范的组织</li>
<li>Sealed    定义jar文件是否封存，值可以是true或者false (这点我还不是很理解)</li>
</ul>


<h2>签名相关属性</h2>

<p>签名方面的属性我们可以来参照JavaMail所提供的mail.jar中的一段</p>

<ul>
<li>Name: javax/mail/Address.class</li>
<li>Digest-Algorithms: SHA MD5</li>
<li>SHA-Digest: AjR7RqnN//cdYGouxbd06mSVfI4=</li>
<li>MD5-Digest: ZnTIQ2aQAtSNIOWXI1pQpw==</li>
</ul>


<p>这段内容定义类签名的类名、计算摘要的算法名以及对应的摘要内容(使用BASE64方法进行编码)</p>

<h2>自定义属性</h2>

<p>除了前面提到的一些属性外，你也可以在MANIFEST.MF中增加自己的属性以及响应的值，例如J2ME程序jar包中就可能包含着如下信息</p>

<ul>
<li>MicroEdition-Configuration: CLDC-1.0</li>
<li>MIDlet-Name: J2ME_MOBBER Midlet Suite</li>
<li>MIDlet-Info-URL: <a href="http://www.javayou.com">http://www.javayou.com</a></li>
<li>MIDlet-Icon: /icon.png</li>
<li>MIDlet-Vendor: Midlet Suite Vendor</li>
<li>MIDlet-1: mobber,/icon.png,mobber</li>
<li>MIDlet-Version: 1.0.0</li>
<li>MicroEdition-Profile: MIDP-1.0</li>
<li>MIDlet-Description: Communicator</li>
</ul>


<p>关键在于我们怎么来读取这些信息呢？其实很简单，JDK给我们提供了用于处理这些信息的API，详细的信息请见java.util.jar包中，我们可以通过给JarFile传递一个jar文件的路径，然后调用JarFile的getManifest方法来获取Manifest信息。</p>
]]></content>
  </entry>
  
</feed>
