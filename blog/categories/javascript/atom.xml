<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript, | Jim's Blog]]></title>
  <link href="http://liu1084.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://liu1084.github.io/"/>
  <updated>2016-05-16T11:19:45+08:00</updated>
  <id>http://liu1084.github.io/</id>
  <author>
    <name><![CDATA[Jim liu]]></name>
    <email><![CDATA[liu1084@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About Extend of jQuery]]></title>
    <link href="http://liu1084.github.io/blog/2016/01/05/about-extend-of-jQuery/"/>
    <updated>2016-01-05T08:24:04+08:00</updated>
    <id>http://liu1084.github.io/blog/2016/01/05/about-extend-of-jQuery</id>
    <content type="html"><![CDATA[<h1>About extend of jQuery</h1>

<p>综述</p>

<p>extend方法在jQuery中是一个很重要的方法，jQuey内部用它来扩展属性方法。常用语jQuery插件开发。</p>

<p>jQuery提供了两个方法，$.extend和$.fn.extend,两个方法内部实现一样，但功能用法却不一样，按照官方解释：</p>

<p>jQuery.extend(): Merge the contents of two or more objects together into the first object.(把两个或者更多的对象合并到第一个当中)</p>

<p>jQuery.fn.extend():Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.(把对象挂载到jQuery的prototype属性，来扩展一个新的jQuery实例方法)</p>

<p>简单来说：$.extend(),是用来扩展jQuery静态方法；$.fn.extend()是用来扩展jQuery实例方法。</p>

<p>例如：</p>

<p>//扩展静态方法：</p>

<pre><code>$.extend({
    sayName:function (){
        console.log(&amp;#8220;My name is jQuery&amp;#8221;);
    }
});

$.sayName(); //&amp;#8221;My name is jQuery&amp;#8221;
</code></pre>

<p>//扩展实例方法：</p>

<p>$.fn.extend({</p>

<p>check: function() {</p>

<p>return this.each(function() {</p>

<p>this.checked = true;</p>

<p>});</p>

<p>}</p>

<p>});</p>

<p>$( &#8220;input[type=&#8217;checkbox&#8217;]&#8221; ).check(); //所有的checkbox都会被选择</p>

<p>Note:扩展的静态方法，直接使用$调用；扩展的实例方法，要用$()调用。</p>

<p>具体用法</p>

<p>参数为多个</p>

<p>extend(dest,src1,src2&#8230;srcN);//可以传入N多个对象</p>

<p>参数的含义：将src1,src2…srcN的每一项合并为dest的每一项，并返回合并后的对象：</p>

<p>var dest = {name:&#8221;job&#8221;,age:20},src1 = {name:&#8221;tom&#8221;,live:&#8221;Beijing&#8221;};</p>

<p>$.extend(dest,src1);</p>

<p>console.log(dest); //{name: &#8220;tom&#8221;, age: 20,live:&#8221;Beijing&#8221;}</p>

<p>Note: dest的结构会发生变化。如果想得到合并的结果，并不修改dest的结构，可以这么做</p>

<p>var dest = {name:&#8221;job&#8221;,age:20},src1 = {name:&#8221;tom&#8221;,live:&#8221;Beijing&#8221;};</p>

<p>var newSrc = $.extend({}, dest, src1);</p>

<p>console.log(dest); //newSrc就是得到的新对象</p>

<p>这样的做法在写插件，设置默认值时会用到</p>

<p>(function ($){</p>

<p>$.fn.extend({</p>

<p>dralog:function (options){</p>

<p>//设置默认样式</p>

<p>var deafualt = {</p>

<p>width:100,</p>

<p>height:100</p>

<p>};</p>

<p>//传过来的参数覆盖默认值</p>

<p>var style = $.extend({},deafualt,options);</p>

<p>$(&#8220;div&#8221;).css(style);</p>

<p>}</p>

<p>});</p>

<p>})(jQuery);</p>

<p>$().dralog({</p>

<p>width: 200,</p>

<p>height: 200</p>

<p>});</p>

<p>console.log(style); //deafualt变为：{width: 200, height: 200}</p>

<p>参数为一个</p>

<p>$.extend(dest)//将dest的每一项合并到jQuery全局对象中//例如$.extend({name:&#8221;tom&#8221;});$.extend({name:&#8221;tom&#8221;});</p>

<p>使用：</p>

<p>$.name$.fn.extend(dest) //将dest的每一项合并到jQuery的实例中//例如$.fn.extend({name:&#8221;tom&#8221;});</p>

<p>使用：</p>

<p>$().name$.extend({nameScope:{}}); //创建一个命名空间$.extend($.nameScope,{name:&#8221;tom&#8221;}); //将name添加到nameScope这个命名空间中使用：$.nameScope.name</p>

<p>第一个参数为true或者false</p>

<p>extend(Boolean,src1,src2&#8230;srcN); //Boolean为true时，为深层拷贝；Boolean为false时，为浅拷贝。//例如var src1 = {name:&#8221;tom&#8221;,location:{city:&#8221;Beijing&#8221;,county:&#8221;China&#8221;}};</p>

<p>var src2 = {name:&#8221;job&#8221;,location:{live:&#8221;New York&#8221;,county:&#8221;USA&#8221;}};$.extend(true,src1,src2);</p>

<p>合并后，src1为：</p>

<p>{name: &#8220;job&#8221;, location: {city: &#8220;Beijing&#8221;,county: &#8220;USA&#8221;,live: &#8220;New York&#8221;}}</p>

<p>//里面的子元素也会进行合并$.extend(false,src1,src2);</p>

<p>合并后，src1为：</p>

<p>{name: &#8220;job&#8221;, location: {city: &#8220;Beijing&#8221;,county: &#8220;China&#8221;}}</p>

<p>//里面的子元素不会合并，直接覆盖</p>

<p>extend是写jQuery插件的利器，以上是关于如何使用它的细节，接下来会分析jQuery如何来实现extend方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中数字类型运算安全范围及开源大整数高精度计算库]]></title>
    <link href="http://liu1084.github.io/?p=135"/>
    <updated>2016-01-05T08:20:07+08:00</updated>
    <id>http://liu1084.github.io/javascript-big-number</id>
    <content type="html"><![CDATA[<p>JavaScript中整数的最大&#8221;安全&#8221;数值为在-(2<sup>53</sup> &#8211; 1) 和 (2<sup>53</sup> &#8211; 1) 之间，即：</p>

<p>Number.MAX_SAFE_INTEGER ： 9007199254740991</p>

<p>Number.MIN_SAFE_INTEGER ： 9007199254740991</p>

<p>超过这个范围的数学计算在有可能是是不准确的，比如在目前最新版的Chrome中：</p>

<blockquote><p>9007199254740991 * 256</p></blockquote>

<p>2305843009213693700 //1 * 6 = 6, 最后一位应该是6?</p>

<p>实现结果应该是： 2305843009213693696 即损失了一定的精度。</p>

<p>JavaScript中的Number对象有一个 Number.isSafeInteger 可以判断此数值是否在安全范围:</p>

<blockquote><p>Number.isSafeInteger(2305843009213693700)</p></blockquote>

<p>false</p>

<p>Crunch是用JavaScript写的一个任意精度的整数运算库。</p>

<p>它被设计用来快速地执行算术运算，特别是那些基于非对称加密密码系统诸如RSA构建。</p>

<p>使用</p>

<p>Crunch 可以用被网站引用</p>

<script src=&#8221;crunch.js&#8221;></script>




<script>
  
var crunch = Crunch();
  
</script>


<p>或者在web worker中引用</p>

<p>var crunch = new Worker(&#8220;crunch.js&#8221;);</p>

<p>或者在node模块中使用</p>

<p>npm install number-crunch</p>

<p>var crunch = require(&#8220;number-crunch&#8221;);</p>

<p>范例 1</p>

<p>x = [10, 123, 21, 127];</p>

<p>y = [4, 211, 176, 200];</p>

<p>crunch.add(x, y); //[15, 78, 198, 71]</p>

<p>这个库使用8位（最大256）整型数组来表示“大整数”。但是在其内部它会被自动转换为28位整型数组。</p>

<p>Crunch 同样可以转化和解析成10进制的字符串，(string上面的默认方法是无法表达大整数的) 使用.stringify() 和 .parse() 方法.</p>

<p>范例 2</p>

<p>crunch.stringify([1,2,3,4,5,6,7,8,9,0]); // &#8220;4759477275222530853120&#8221;</p>

<p>crunch.parse(&#8220;4759477275222530853120&#8221;); // [1,2,3,4,5,6,7,8,9,0]</p>

<p>支持的方法</p>

<p>Function Input Parameters Output</p>

<p>add x, y x + y</p>

<p>sub x, y x &#8211; y</p>

<p>mul x, y x * y</p>

<p>div x, y x / y</p>

<p>sqr x x * x</p>

<p>mod x, y x % y</p>

<p>bmr x, y, [mu] x % y</p>

<p>exp x, e, n x<sup>e</sup> % n</p>

<p>gar x, p, q, d, u, [dp1], [dq1] x<sup>d</sup> % pq</p>

<p>inv x, y 1/x % y</p>

<p>xor x, y x XOR y</p>

<p>cut x Remove leading zeroes of x</p>

<p>zero x Return zero array of length x</p>

<p>compare x, y -1: x &lt; y, 0: x = y, 1: x > y</p>

<p>decrement x x &#8211; 1</p>

<p>factorial n n! [n &lt; 268435456]</p>

<p>nextPrime x First prime after x</p>

<p>testPrime x Boolean x is prime</p>

<p>stringify x String (base 10 representation)</p>

<p>parse s Arbitrary-precision integer</p>

<p>transform x, [toRaw] Radix conversion</p>

<p>Web Workers</p>

<p>Crunch 可以在 Web Worker 中加载. 指令信息通过如下格式传递:</p>

<p>{func: &#8220;&#8221;, args: []}</p>

<p>例子 3</p>

<p>var crunch = new Worker(&#8220;crunch.js&#8221;);</p>

<p>var message = {func: &#8220;add&#8221;, args: [[10, 123, 21, 127], [4, 211, 176, 200]]};</p>

<p>crunch.onmessage = function(m) {</p>

<p>console.log(m);</p>

<p>};</p>

<p>crunch.postMessage(message);</p>

<p>注* 并且JavaScript中位运算所操作的是32位有符号整数，此运算目前还不支持对位运算的扩展。</p>
]]></content>
  </entry>
  
</feed>
